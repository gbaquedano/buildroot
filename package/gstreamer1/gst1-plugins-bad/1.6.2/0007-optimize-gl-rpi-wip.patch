From e9eccf2e83a776d08a9859de62ce79046d44a601 Mon Sep 17 00:00:00 2001
From: Gwang Yoon Hwang <yoon@igalia.com>
Date: Thu, 29 Oct 2015 17:42:36 +0900
Subject: [PATCH 02/15] Use GLFlush

In RPi2, all gl calls to the eglcontext are locked in side of the
driver. We don't have to call glFinish to synchronize it.
---
 gst-libs/gst/gl/gstglsyncmeta.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/gst-libs/gst/gl/gstglsyncmeta.c b/gst-libs/gst/gl/gstglsyncmeta.c
index f680353..232bb5b 100644
--- a/gst-libs/gst/gl/gstglsyncmeta.c
+++ b/gst-libs/gst/gl/gstglsyncmeta.c
@@ -72,7 +72,7 @@ _set_sync_point (GstGLContext * context, GstGLSyncMeta * sync_meta)
     gl->Flush ();
     GST_LOG ("setting sync object %p", sync_meta->glsync);
   } else {
-    gl->Finish ();
+    gl->Flush ();
   }
 }
 

From 451af02252851067723207cfcb08a2eefc95be35 Mon Sep 17 00:00:00 2001
From: Gwang Yoon Hwang <yoon@igalia.com>
Date: Fri, 30 Oct 2015 17:08:58 +0900
Subject: [PATCH 03/15] unmapping gl memory asynchronusly.

unmapping gl memory doesn't have to be synchronized.
If it is a buffer from the pool, this memory should be
marked as a free after actual unmapping call executed.
---
 gst-libs/gst/gl/gstglbasebuffer.c | 19 +++++++++++----
 gst-libs/gst/gl/gstglcontext.c    | 51 +++++++++++++++++++++++++++++++++++++++
 gst-libs/gst/gl/gstglcontext.h    |  4 +++
 3 files changed, 69 insertions(+), 5 deletions(-)

diff --git a/gst-libs/gst/gl/gstglbasebuffer.c b/gst-libs/gst/gl/gstglbasebuffer.c
index 495e104..353ba80 100644
--- a/gst-libs/gst/gl/gstglbasebuffer.c
+++ b/gst-libs/gst/gl/gstglbasebuffer.c
@@ -418,15 +418,24 @@ _unmap_data_gl (GstGLContext * context, struct unmap_data *transfer)
 }
 
 static void
+_mem_unmap_full_cb (struct unmap_data *transfer)
+{
+  gst_memory_unref (transfer->mem);
+  g_slice_free (struct unmap_data, transfer);
+}
+
+static void
 _mem_unmap_full (GstGLBaseBuffer * mem, GstMapInfo * info)
 {
-  struct unmap_data transfer;
+  struct unmap_data *transfer;
+  transfer = g_slice_new (struct unmap_data);
 
-  transfer.mem = mem;
-  transfer.info = info;
+  transfer->mem = mem;
+  transfer->info = info;
+  gst_memory_ref (mem);
 
-  gst_gl_context_thread_add (mem->context,
-      (GstGLContextThreadFunc) _unmap_data_gl, &transfer);
+  gst_gl_context_thread_add_async (mem->context,
+      (GstGLContextThreadFunc) _unmap_data_gl, transfer, _mem_unmap_full_cb);
 }
 
 gboolean
diff --git a/gst-libs/gst/gl/gstglcontext.c b/gst-libs/gst/gl/gstglcontext.c
index d177df8..613fa07 100644
--- a/gst-libs/gst/gl/gstglcontext.c
+++ b/gst-libs/gst/gl/gstglcontext.c
@@ -1590,6 +1590,7 @@ typedef struct
   GstGLContext *context;
   GstGLContextThreadFunc func;
   gpointer data;
+  GDestroyNotify destroy_notify;
 } RunGenericData;
 
 static void
@@ -1641,6 +1642,56 @@ gst_gl_context_thread_add (GstGLContext * context,
   gst_object_unref (window);
 }
 
+static void
+_free_run_generic_data_cb (RunGenericData *rdata)
+{
+  rdata->destroy_notify (rdata->data);
+  g_slice_free (RunGenericData, rdata);
+}
+
+/**
+ * gst_gl_context_thread_add_async:
+ * @context: a #GstGLContext
+ * @func: a #GstGLContextThreadFunc
+ * @data: (closure): user data to call @func with
+ *
+ * Execute @func in the OpenGL thread of @context with @data asynchronously without wait
+ *
+ * MT-safe
+ *
+ * Since: 1.4
+ */
+void
+gst_gl_context_thread_add_async (GstGLContext * context,
+    GstGLContextThreadFunc func, gpointer data, GDestroyNotify destroy_notify)
+{
+  GstGLWindow *window;
+  RunGenericData *rdata;
+
+  g_return_if_fail (GST_GL_IS_CONTEXT (context));
+  g_return_if_fail (func != NULL);
+
+  if (GST_GL_IS_WRAPPED_CONTEXT (context)) {
+    g_return_if_fail (context->priv->active_thread == g_thread_self ());
+    func (context, data);
+    return;
+  }
+
+  rdata = g_slice_new (RunGenericData);
+  rdata->context = context;
+  rdata->data = data;
+  rdata->func = func;
+  rdata->destroy_notify = destroy_notify;
+
+  window = gst_gl_context_get_window (context);
+
+  gst_gl_window_send_message_async (window,
+      GST_GL_WINDOW_CB (_gst_gl_context_thread_run_generic), rdata, (GDestroyNotify) _free_run_generic_data_cb);
+
+  gst_object_unref (window);
+}
+
+
 /**
  * gst_gl_context_get_gl_version:
  * @context: a #GstGLContext
diff --git a/gst-libs/gst/gl/gstglcontext.h b/gst-libs/gst/gl/gstglcontext.h
index 16b9d11..8be66ac 100644
--- a/gst-libs/gst/gl/gstglcontext.h
+++ b/gst-libs/gst/gl/gstglcontext.h
@@ -154,6 +154,10 @@ gboolean gst_gl_context_fill_info (GstGLContext * context, GError ** error);
 void gst_gl_context_thread_add (GstGLContext * context,
     GstGLContextThreadFunc func, gpointer data);
 
+void gst_gl_context_thread_add_async (GstGLContext * context,
+    GstGLContextThreadFunc func, gpointer data, GDestroyNotify destroy_notify);
+
+
 GST_DEBUG_CATEGORY_EXTERN (gst_gl_context_debug);
 
 G_END_DECLS
